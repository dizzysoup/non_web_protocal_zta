syntax = "proto3";

package credentials;

// 憑證服務
service CredentialService {
  rpc StoreCredential(CredentialRequest) returns (CredentialResponse);
  rpc SendCredentialToAuth(CredentialRequest) returns (CredentialResponse);
  rpc Logout(LogoutMsg) returns(CredentialResponse);  
}

// 存取RP 相關服務
service RPManagerService {
  rpc CheckRPRegistration(MsgRequest) returns(RPCheckReply);
}

// FIDO 註冊及認證相關服務
// 註冊 : client > username 
service AuthenticationService {
  rpc RegisterBegin(MsgRequest) returns (PublicKeyResponse);
  rpc SendClientData(CollectedClientData) returns (Message);
  rpc SendAttestationObject(AttestationObject) returns(Message);
}

// Register begin 的PublicKey ==============================
message PublicKeyResponse {
  string attestation = 1 ;
  AuthenticatorSelection authenticatorSelection = 2;
  string challenge = 3;
  repeated PubKeyCredParam pubKeyCredParams = 4;
  RP rp = 5 ;
  User user = 6;
  string token = 7 ;
}

message PubKeyCredParam {
  int32 alg = 1;
  string type = 2;
}

message AuthenticatorSelection {
  string authenticatorAttachment = 1;
  bool requireResidentKey = 2;
  string residentKey = 3;
  string userVerification = 4;
}

message RP {
  string id = 1;
  string name = 2;
}

message User {
  string id = 1;
  string name = 2;
}

// Register complete CollectedClientData ============================

message CollectedClientData {
  string type = 1;
  bytes challenge = 2;
  string origin = 3;
  bool cross_origin = 4;
}

// Register complete AuthenticatorData   ========================

message AAGUID {
  bytes value = 1;
}

message AttestedCredentialData {
  AAGUID aaguid = 1;
  bytes credential_id = 2;
  map<int32, bytes> public_key = 3;
}


message AuthenticatorData {
  bytes rp_id_hash = 1;
  int32 flags = 2;
  int32 counter = 3;
  AttestedCredentialData credential_data = 4;
}

message AttestationObject {
  string fmt = 1;
  AuthenticatorData auth_data = 2;
  map<string, bytes> att_stmt = 3;
  repeated bytes x5c = 4 ;
  string token = 5 ;
}

// Register complete AuthenticatorData ==========================

message Message {
  string msg = 1 ;
}

message MsgRequest {
  string name = 1 ;
}

// 定義請求訊息
message PublicKey {
  int32 kty = 1;
  int32 alg = 2;
  int32 crv = 3;
  string x = 4;
  string y = 5;
}

message CredentialRequest {
  string user_id = 1;
  PublicKey public_key = 2;
  int32 sign_count = 3;
  string transports = 4;
  string aaguid = 5;
  string credential_id = 6;
}

// 定義回應訊息
message LogoutMsg {
  string message = 1;
}

message RPCheckReply {
  bool is_registered = 1 ;  
  string message = 2 ;   
}

message CredentialResponse {
  string message = 1;
}